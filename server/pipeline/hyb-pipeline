#!/usr/bin/env node
'use strict'

const meow = require('meow')
const os = require('os')
const getData = require('../lib/get-data')
const path = require('path')
const childProcess = require('child_process')

if (process.argv.length < 3) {
	console.error('usage: hyb-pipeline <file.gb>')
	process.exit(1)
}

async function main() {
	const cli = meow(
		`
			Usage
			  $ hyb-pipeline [options] <pipeline> <filepath | ->

			Options
			  --beast-chain-length N    Affects the BEAST chain length
			  --beast-cpu-core-count N  How many cores BEAST should run on
			  --[no-]quiet              Should the output of each step be printed

			Examples
			  $ hyb-pipeline --beast-chain-length 10000 mbnb catdog.gb
		`,
		{
			description: 'Control the pipeline worker',
			flags: {
				beastChainLength: {
					type: 'number',
					default: 10000000,
				},
				beastCpuCoreCount: {
					type: 'number',
					default: os.cpus().length,
				},
				quiet: {
					type: 'boolean',
					default: false,
				},
			},
		}
	)

	const [pipeline, filepath] = cli.input

	console.log(`processing ${filepath}`)
	const data = await getData(filepath)

	const child = childProcess.fork(path.join(__dirname, 'worker.js'))

	child.on('message', communique => {
		let { type, payload } = communique

		switch (type) {
			case 'error':
				console.error('error!', payload.error)
				break
			case 'exit':
				console.log()
				console.log('exit')
				break
			case 'stage-start': {
				let { stage } = payload
				console.log(`beginning stage: ${stage}`)
				break
			}
			case 'stage-complete': {
				let { stage, result, timeTaken } = payload
				console.log(`completed stage: ${stage} (in ${timeTaken.toFixed(2)}ms)`)
				console.log()
				if (!cli.flags.quiet) {
					console.log(result)
				}
				break
			}
			default:
				console.log('unknown message type', type)
		}

		if (type === 'error') {
			child.disconnect()
			process.exit(1)
		}

		if (type === 'exit') {
			child.disconnect()
		}
	})

	child.send({
		pipeline,
		filepath,
		data,
		options: { beastChainLength: cli.flags.beastChainLength },
	})
}

main()

#!/usr/bin/env node
'use strict'

const getData = require('../lib/get-data')
const path = require('path')
const childProcess = require('child_process')

if (process.argv.length < 3) {
	console.error('usage: hyb-pipeline <file.gb>')
	process.exit(1)
}

async function main() {
	const pipeline = process.argv[2]
	const filepath = process.argv[3]

	console.log(`processing ${filepath}`)
	const data = await getData(filepath)

	const child = childProcess.fork(path.join(__dirname, 'worker.js'))

	child.on('message', communique => {
		let { type, payload } = communique

		switch (type) {
			case 'error':
				console.error('error!', payload.error)
				break
			case 'exit':
				console.log()
				console.log('exit')
				break
			case 'stage-start': {
				let { stage } = payload
				console.log(`beginning stage: ${stage}`)
				break
			}
			case 'stage-complete': {
				let { stage, result, timeTaken } = payload
				console.log(`completed stage: ${stage} (in ${timeTaken.toFixed(2)}ms)`)
				console.log()
				console.log(result)
				break
			}
			default:
				console.log('unknown message type', type)
		}

		if (type === 'error') {
			child.disconnect()
			process.exit(1)
		}

		if (type === 'exit') {
			child.disconnect()
		}
	})

	child.send({ pipeline, filepath, data })
}

main()
